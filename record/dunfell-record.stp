/*
 * Copyright Â© Philip Withnall 2015 <philip@tecnocode.co.uk>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation; either version 2.1 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* Log file header. */
probe begin {
  printdln (",", "Dunfell log", "1.0", gettimeofday_us ());
}

probe glib.main_context_new {
  printdln (",", "g_main_context_new", gettimeofday_us (), tid (), context);
}

probe glib.main_context_acquire {
  printdln (",", "g_main_context_acquire", gettimeofday_us (), tid (), context, success);
}

probe glib.main_context_release {
  printdln (",", "g_main_context_release", gettimeofday_us (), tid (), context);
}

probe glib.main_context_free {
  printdln (",", "g_main_context_free", gettimeofday_us (), tid (), context);
}

probe glib.main_source_attach {
  printdln (",", "g_source_attach", gettimeofday_us (), tid (), source_ptr, context, id);
}

probe glib.main_source_destroy {
  printdln (",", "g_source_destroy", gettimeofday_us (), tid (), source_ptr, context);
}

probe glib.main_context_push_thread_default {
  printdln (",", "g_main_context_push_thread_default", gettimeofday_us (), tid (), context);
}

probe glib.main_context_pop_thread_default {
  printdln (",", "g_main_context_pop_thread_default", gettimeofday_us (), tid (), context);
}

probe glib.main_context_before_prepare {
  printdln (",", "g_main_context_before_prepare", gettimeofday_us (), tid (), context);
}

probe glib.main_context_after_prepare {
  printdln (",", "g_main_context_after_prepare", gettimeofday_us (), tid (), context, priority, n_ready);
}

probe glib.main_context_before_query {
  printdln (",", "g_main_context_before_query", gettimeofday_us (), tid (), context, max_priority);
}

probe glib.main_context_after_query {
  printdln (",", "g_main_context_after_query", gettimeofday_us (), tid (), context, timeout, n_fds);
}

probe glib.main_context_before_check {
  printdln (",", "g_main_context_before_check", gettimeofday_us (), tid (), context, max_priority, n_fds);
}

probe glib.main_context_after_check {
  printdln (",", "g_main_context_after_check", gettimeofday_us (), tid (), context, n_ready);
}

probe glib.main_context_before_dispatch {
  printdln (",", "g_main_context_before_dispatch", gettimeofday_us (), tid (), context);
}

probe glib.main_context_after_dispatch {
  printdln (",", "g_main_context_after_dispatch", gettimeofday_us (), tid (), context);
}

probe glib.main_after_prepare {
  printdln (",", "g_source_after_prepare", gettimeofday_us (), tid (), source, glib_usymname (prepare), source_timeout);
}

probe glib.main_after_check {
  printdln (",", "g_source_after_check", gettimeofday_us (), tid (), source, glib_usymname (check), result);
}

probe glib.main_before_dispatch {
  printdln (",", "g_source_before_dispatch", gettimeofday_us (), tid (), source_ptr, glib_usymname (dispatch), glib_usymname (callback), user_data);
}

probe glib.main_after_dispatch {
  printdln (",", "g_source_after_dispatch", gettimeofday_us (), tid (), source_ptr, glib_usymname (dispatch), need_destroy);
}

probe glib.main_context_wakeup {
  printdln (",", "g_main_context_wakeup", gettimeofday_us (), tid (), context);
}

probe glib.main_context_wakeup_acknowledge {
  printdln (",", "g_main_context_wakeup_acknowledge", gettimeofday_us (), tid (), context);
}

probe glib.source_new {
  printdln (",", "g_source_new", gettimeofday_us (), tid (), source, glib_usymname (prepare), glib_usymname (check), glib_usymname (dispatch), glib_usymname (finalize), struct_size);
}

probe glib.source_set_callback {
  printdln (",", "g_source_set_callback", gettimeofday_us (), tid (), source, glib_usymname (func), data, glib_usymname (notify));
}

probe glib.source_set_callback_indirect {
  printdln (",", "g_source_set_callback_indirect", gettimeofday_us (), tid (), source, callback_data, glib_usymname (ref), glib_usymname (unref), glib_usymname (get));
}

probe glib.source_set_ready_time {
  printdln (",", "g_source_set_ready_time", gettimeofday_us (), tid (), source, ready_time);
}

probe glib.source_set_priority {
  printdln (",", "g_source_set_priority", gettimeofday_us (), tid (), source, context, priority);
}

probe glib.source_set_name {
  printdln (",", "g_source_set_name", gettimeofday_us (), tid (), source, name);
}

probe glib.source_add_child_source {
  printdln (",", "g_source_add_child_source", gettimeofday_us (), tid (), source, child_source);
}

probe glib.source_before_free {
  printdln (",", "g_source_before_free", gettimeofday_us (), tid (), source, context, glib_usymname (finalize));
}

probe gio.task_new {
  printdln (",", "g_task_new", gettimeofday_us (), tid (), task, source_object, cancellable, glib_usymname (callback), callback_data);
}

probe gio.task_set_task_data {
  printdln (",", "g_task_set_task_data", gettimeofday_us (), tid (), task, task_data, glib_usymname (task_data_destroy));
}

probe gio.task_set_priority {
  printdln (",", "g_task_set_priority", gettimeofday_us (), tid (), task, priority);
}

probe gio.task_set_source_tag {
  printdln (",", "g_task_set_source_tag", gettimeofday_us (), tid (), task, glib_usymname (source_tag));
}

probe gio.task_before_return {
  printdln (",", "g_task_before_return", gettimeofday_us (), tid (), task, source_object, glib_usymname (callback), callback_data);
}

probe gio.task_propagate {
  printdln (",", "g_task_propagate", gettimeofday_us (), tid (), task, error_set);
}

probe gio.task_before_run_in_thread {
  printdln (",", "g_task_before_run_in_thread", gettimeofday_us (), tid (), task, glib_usymname (task_func));
}

probe gio.task_after_run_in_thread {
  printdln (",", "g_task_after_run_in_thread", gettimeofday_us (), tid (), task, thread_cancelled);
}

probe glib.thread_spawned {
  printdln (",", "g_thread_spawned", gettimeofday_us (), tid (), func, data, name);
}

function glib_usymname:string (addr: long) {
  /* FIXME: usymname() currently is not defined for --dyninst, so define a
   * basic form of it here until it's implemented upstream.
   * https://sourceware.org/bugzilla/show_bug.cgi?id=14703 */
  return sprintf ("%x", addr);
}
